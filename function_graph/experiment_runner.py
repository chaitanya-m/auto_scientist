import os
import pandas as pd
from data_gen.problems import Problem
from run_experiment import run_simple_experiment

def run_experiments(problem_cls: Problem, phase: str, num_problems: int, mcts_budget: int, steps: int, output_dir: str):
    """
    Runs experiments for all problems generated by the given Problem class.
    
    Arguments:
      problem_cls : a Problem class that implements problem_generator.
      phase       : phase to run experiments on.
      num_problems: number of problems (different seeds) to generate.
      mcts_budget : search budget for each experiment.
      steps       : number of steps per experiment.
      output_dir  : path to save CSV results.
    """
    os.makedirs(output_dir, exist_ok=True)
    all_dfs = []
    summaries = []
    
    for problem in problem_cls.problem_generator(phase, num_problems):
        df, summary = run_simple_experiment(
            problem=problem,
            problem_seed=problem.problem_seed,
            mcts_budget=mcts_budget,
            steps=steps
        )
        all_dfs.append(df)
        summaries.append(summary)
    
    master_df = pd.concat(all_dfs, ignore_index=True)
    csv_path = os.path.join(output_dir, f"results_{phase}.csv")
    master_df.to_csv(csv_path, index=False)
    print(f"Saved detailed metrics to {csv_path}")
    
    print_experiment_summary(summaries)

def print_experiment_summary(summaries):
    sum_df = pd.DataFrame(summaries)
    print("\n=== Experiment Summary ===")
    print(f"Phase: {summaries[0]['phase'] if summaries else 'N/A'}")
    print(f"Total Problems: {len(summaries)}")
    print("-- Steps to Epsilon (Îµ threshold) --")
    print(sum_df.steps_to_epsilon.describe(), "\n")
    print("-- Total Reuse Actions --")
    print(sum_df.total_reuse.describe(), "\n")
    print("-- Final MSE --")
    print(sum_df.final_mse.describe(), "\n")