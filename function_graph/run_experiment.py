# run_experiment.py

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from keras import layers, models

from data_gen.problems import AutoencoderProblem, Problem
from envs import FunctionGraphEnv

def main(problem_cls, phase: int = 0, mcts_budget: int = 8, steps: int = 15, output_dir: str = "results"):
    """
    Runs experiments for all problems generated by the given Problem class.
    
    phase       : Integer phase (0 = basic, 1 = intermediate, >1 extrapolated).
    """
    os.makedirs(output_dir, exist_ok=True)

    from experiment_runner import run_experiments
    run_experiments(
        problem_cls=problem_cls,
        phase=phase,
        num_problems=2,
        mcts_budget=mcts_budget,
        steps=steps,
        output_dir=output_dir
    )

if __name__ == "__main__":
    import sys
    from data_gen import problems as problems_module

    # If a class name is provided, try to use it as the problem class.
    if len(sys.argv) > 1:
        cls_name = sys.argv[1]
        try:
            problem_cls = getattr(problems_module, cls_name)
        except AttributeError:
            sys.exit(f"Error: Problem class '{cls_name}' not found in data_gen.problems")
    else:
        from data_gen.problems import AutoencoderProblem as problem_cls

    # Since phases are now integers, default to 0 (basic phase)
    main(problem_cls=problem_cls, phase=0)
