# run_experiment.py

from data_gen.curriculum import Curriculum

def main(problem_cls, phase: int = 0, mcts_budget: int = 8, steps: int = 15, output_dir: str = "results"):
    """
    Runs experiments for all problems generated by the given Problem class.
    
    phase       : Integer phase (0 = basic, 1 = intermediate, >1 extrapolated).
    """
    # Assume that the curriculum is created elsewhere based on desired experimental conditions.
    # For example, one might construct it as follows (this is illustrative):
    #
    # from data_gen.curriculum import Curriculum
    # def my_problem_generator():
    #     # Return an iterator over Problem instances (with phase and seed handling already embedded).
    #     return Curriculum.seeded_problem_variations(problem_cls, phase, 2)
    # curriculum = Curriculum(my_problem_generator)
    #
    # Here, we assume that 'curriculum' is provided to main.
    from experiment_runner import run_experiments
    # For demonstration, if problem_cls is provided, we create a default curriculum.
    def default_generator():
        return Curriculum.seeded_problem_variations(problem_cls, phase, 2)
    curriculum = Curriculum(default_generator)

    run_experiments(
        curriculum=curriculum,
        mcts_budget=mcts_budget,
        steps=steps,
        output_dir=output_dir
    )

if __name__ == "__main__":
    import sys
    from data_gen import problems as problems_module

    # If a class name is provided, try to use it as the problem class.
    if len(sys.argv) > 1:
        cls_name = sys.argv[1]
        try:
            problem_cls = getattr(problems_module, cls_name)
        except AttributeError:
            sys.exit(f"Error: Problem class '{cls_name}' not found in data_gen.problems")
    else:
        from data_gen.problems import AutoencoderProblem as problem_cls

    # Since phases are now integers, default to 0 (basic phase)
    main(problem_cls=problem_cls, phase=0)
